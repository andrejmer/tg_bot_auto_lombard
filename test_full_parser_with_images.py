#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from avito_parser import AvitoParser

def test_full_with_images():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ (5 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π)"""
    print("üì∏ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞")
    print("‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 5-7 –º–∏–Ω—É—Ç")
    print("üñºÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –ê–≤–∏—Ç–æ")
    print("=" * 60)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    answer = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞? (y/n): ").lower()
    if answer not in ['y', 'yes', '–¥–∞', '–¥']:
        print("‚ùå –¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        return

    parser = AvitoParser(headless=False)
    url = "https://www.avito.ru/brands/be5f12b20964ea30a159d92acf5074cb?gdlkerfdnwq=101&page_from=from_item_header&iid=7526372017&page_from=from_item_card&iid=7526372017"

    # –ü–∞—Ç—á–∏–º –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    original_parse = parser.parse_avito_page

    def limited_full_parse(url):
        """–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏"""
        print(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")

        if not parser.driver:
            parser.setup_driver()

        try:
            parser.driver.get(url)

            import time
            from selenium.webdriver.common.by import By
            from urllib.parse import urljoin

            time.sleep(5)
            parser.scroll_to_load_all()

            car_elements = parser.driver.find_elements(By.CSS_SELECTOR, '[itemtype="http://schema.org/Product"]')
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(car_elements)} (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5)")

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5
            car_elements = car_elements[:5]

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            car_links = []
            car_titles = []
            car_prices = []

            for i, element in enumerate(car_elements, 1):
                try:
                    title_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="name"]')
                    title = title_elem.text.strip()
                    car_titles.append(title)

                    try:
                        price_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="price"]')
                        price_text = price_elem.get_attribute('content')
                        if not price_text:
                            price_elem = element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                            price_text = price_elem.text
                        price = parser.parse_price(price_text)
                    except:
                        price = 0
                    car_prices.append(price)

                    link_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="url"]')
                    car_url = urljoin(url, link_elem.get_attribute('href'))
                    car_links.append(car_url)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    continue

            # –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            for i, (car_url, title, price) in enumerate(zip(car_links, car_titles, car_prices), 1):
                try:
                    print(f"\nüöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/5: {title}")

                    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    full_title, brand, model, year = parser.parse_car_title(title)
                    basic_details = parser.parse_car_details(title)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ (–≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
                    detailed_info = parser.parse_car_details_from_page(car_url)

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_files = []
                    if detailed_info.get('images'):
                        print(f"  üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(detailed_info['images'])}")
                        image_files = parser.download_multiple_images(
                            detailed_info['images'], brand, model, year
                        )
                        print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
                    else:
                        print("  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    mileage = basic_details.get('mileage', 0)
                    transmission = basic_details.get('transmission', 'AT')
                    fuel_type = basic_details.get('fuel_type', '–ë–µ–Ω–∑–∏–Ω')

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    from avito_parser import CarData
                    car = CarData(
                        title=full_title,
                        brand=brand,
                        model=model,
                        year=year,
                        price=price,
                        mileage=mileage,
                        engine_volume=basic_details.get('engine_volume'),
                        fuel_type=fuel_type,
                        transmission=transmission,
                        drive_type=detailed_info.get('drive_type_from_page', '–ü–µ—Ä–µ–¥–Ω–∏–π'),
                        body_type=detailed_info.get('body_type_from_page', '–°–µ–¥–∞–Ω'),
                        color=detailed_info.get('color_from_page', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        url=car_url,
                        image_url=detailed_info.get('images', [None])[0],
                        image_filename=image_files[0] if image_files else None,
                        images=image_files,
                        vin=detailed_info.get('vin_from_page'),
                        description=detailed_info.get('full_description') or f"{brand} {model} {year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
                    )

                    parser.cars_data.append(car)
                    print(f"‚úÖ {brand} {model} {year} - {price:,} ‚ÇΩ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)})")

                except Exception as e:
                    import traceback
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
                    continue

            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        finally:
            if parser.driver:
                parser.driver.quit()

    try:
        limited_full_parse(url)

        if parser.cars_data:
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
            for car in parser.cars_data:
                images_count = len(car.images) if car.images else 0
                print(f"‚Ä¢ {car.brand} {car.model} {car.year} - {car.price:,} ‚ÇΩ")
                print(f"  üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}")
                print(f"  ‚õΩ {car.fuel_type} | üîß {car.transmission}")
                if car.description and car.description != f"{car.brand} {car.model} {car.year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.":
                    print(f"  üìù {car.description[:80]}...")

            save = input(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏? (y/n): ").lower()
            if save in ['y', 'yes', '–¥–∞', '–¥']:
                parser.save_to_hugo("../hugo-site/content/cars")
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                import subprocess
                result = subprocess.run("ls -la ../hugo-site/static/images/cars/", shell=True, capture_output=True, text=True)
                print(f"\nüìÇ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫–µ:")
                print(result.stdout)

                print("\nüåê –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
                print("cd ../hugo-site && hugo server")
        else:
            print("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_full_with_images()
