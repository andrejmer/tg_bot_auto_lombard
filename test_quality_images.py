#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏
"""

import sys
import os
sys.path.append('parser')

from parser.avito_parser import AvitoParser

def test_quality():
    """–¢–µ—Å—Ç —Å 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üì∏ –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ?size=1200x900 –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("üöó –¢–µ—Å—Ç–∏—Ä—É–µ–º 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    parser = AvitoParser(headless=False, max_images=10)
    
    import time
    from selenium.webdriver.common.by import By
    from urllib.parse import urljoin
    
    url = "https://www.avito.ru/brands/be5f12b20964ea30a159d92acf5074cb?gdlkerfdnwq=101&page_from=from_item_header&iid=7526372017&page_from=from_item_card&iid=7526372017"
    
    try:
        if not parser.driver:
            parser.setup_driver()
        
        parser.driver.get(url)
        time.sleep(5)
        parser.scroll_to_load_all()
        
        car_elements = parser.driver.find_elements(By.CSS_SELECTOR, '[itemtype="http://schema.org/Product"]')
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(car_elements)} (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3)")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
        car_elements = car_elements[:3]
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        car_data = []
        for i, element in enumerate(car_elements, 1):
            try:
                title_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="name"]')
                title = title_elem.text.strip()
                
                try:
                    price_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="price"]')
                    price_text = price_elem.get_attribute('content')
                    if not price_text:
                        price_elem = element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                        price_text = price_elem.text
                    price = parser.parse_price(price_text)
                except:
                    price = 0
                
                link_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="url"]')
                car_url = urljoin(url, link_elem.get_attribute('href'))
                
                car_data.append((title, price, car_url))
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                continue
        
        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        for i, (title, price, car_url) in enumerate(car_data, 1):
            try:
                print(f"\nüöó –¢–µ—Å—Ç–∏—Ä—É–µ–º {i}/3: {title}")
                
                # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                full_title, brand, model, year = parser.parse_car_title(title)
                basic_details = parser.parse_car_details(title)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                detailed_info = parser.parse_car_details_from_page(car_url)
                
                if detailed_info.get('images'):
                    print(f"  üéØ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(detailed_info['images'])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                    for j, img_url in enumerate(detailed_info['images'][:2], 1):
                        print(f"    {j}. {img_url}")
                        if '?size=' in img_url:
                            print(f"       ‚úÖ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (1200x900)")
                        else:
                            print(f"       ‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_files = parser.download_multiple_images(
                        detailed_info['images'], brand, model, year
                    )
                    
                    print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    
                    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å
                    from parser.avito_parser import CarData
                    car = CarData(
                        title=full_title,
                        brand=brand,
                        model=model,
                        year=year,
                        price=price,
                        mileage=basic_details.get('mileage', 0),
                        engine_volume=basic_details.get('engine_volume', '2.0'),
                        fuel_type=basic_details.get('fuel_type', '–ë–µ–Ω–∑–∏–Ω'),
                        transmission=basic_details.get('transmission', 'AT'),
                        url=car_url,
                        images=image_files,
                        image_filename=image_files[0] if image_files else None,
                        description=detailed_info.get('full_description') or f"{brand} {model} {year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
                    )
                    
                    parser.cars_data.append(car)
                    
                else:
                    print(f"  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            except Exception as e:
                import traceback
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
                continue
        
        if parser.cars_data:
            save = input(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π? (y/n): ").lower()
            if save in ['y', 'yes', '–¥–∞', '–¥']:
                parser.save_to_hugo("hugo-site/content/cars")
                print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
                import subprocess
                result = subprocess.run("ls -lah hugo-site/static/images/cars/*.jpg | head -5", shell=True, capture_output=True, text=True)
                print(f"\nüìä –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
                print(result.stdout)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if parser.driver:
            parser.driver.quit()

if __name__ == "__main__":
    test_quality()
