import asyncio
import logging
import os
from typing import List, Dict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    CallbackQuery
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ü—Ä–∏–º–µ—Ä—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
CARS = [
    {
        "id": "1",
        "brand": "BMW",
        "model": "X5",
        "year": 2019,
        "price": 2500000,
        "mileage": 75000,
        "engine": "3.0L",
        "power": 249,
        "image_url": "https://images.unsplash.com/photo-1550355291-bbee04a92027",
        "description": "–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ–¥–∏–Ω –≤–ª–∞–¥–µ–ª–µ—Ü, –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
    },
    {
        "id": "2",
        "brand": "Mercedes-Benz",
        "model": "E200",
        "year": 2020,
        "price": 3100000,
        "mileage": 45000,
        "engine": "2.0L",
        "power": 197,
        "image_url": "https://images.unsplash.com/photo-1549399542-7e3f8b79c341",
        "description": "–ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è."
    },
    {
        "id": "3",
        "brand": "Audi",
        "model": "A6",
        "year": 2021,
        "price": 4200000,
        "mileage": 25000,
        "engine": "2.0L",
        "power": 245,
        "image_url": "https://images.unsplash.com/photo-1552519507-da3b142c6e3d",
        "description": "–ù–∞ –≥–∞—Ä–∞–Ω—Ç–∏–∏, –≤—Å–µ –¢–û —É –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥–∏–ª–µ—Ä–∞."
    }
]

def get_car_keyboard(car_id: str, is_first: bool, is_last: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if not is_first:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"prev_{car_id}"))
    if not is_last:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"next_{car_id}"))
    if nav_buttons:
        keyboard.append(nav_buttons)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    keyboard.append([InlineKeyboardButton(
        text="üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        callback_data=f"info_{car_id}"
    )])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏
    keyboard.append([InlineKeyboardButton(
        text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
        callback_data=f"contact_{car_id}"
    )])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_car_caption(car: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    return (
        f"üöó {car['brand']} {car['model']} {car['year']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {car['price']:,} ‚ÇΩ\n"
        f"üõ£ –ü—Ä–æ–±–µ–≥: {car['mileage']:,} –∫–º\n"
        f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['engine']} ({car['power']} –ª.—Å.)"
    )

async def show_car(message: Message | CallbackQuery, car_index: int = 0) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    car = CARS[car_index]
    is_first = car_index == 0
    is_last = car_index == len(CARS) - 1

    caption = format_car_caption(car)
    keyboard = get_car_keyboard(car["id"], is_first, is_last)

    if isinstance(message, CallbackQuery):
        await message.message.edit_media(
            media=InputMediaPhoto(media=car["image_url"], caption=caption),
            reply_markup=keyboard
        )
    else:
        await message.answer_photo(
            photo=car["image_url"],
            caption=caption,
            reply_markup=keyboard
        )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    try:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥–∞.\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö."
        )
        await show_car(message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")

@dp.callback_query(lambda c: c.data.startswith(('next_', 'prev_')))
async def process_navigation(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
    action, car_id = callback_query.data.split('_')
    current_index = next(i for i, car in enumerate(CARS) if car["id"] == car_id)

    if action == 'next':
        next_index = current_index + 1
    else:
        next_index = current_index - 1

    await show_car(callback_query, next_index)
    await callback_query.answer()

@dp.callback_query(lambda c: c.data.startswith('info_'))
async def process_info(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    car_id = callback_query.data.split('_')[1]
    car = next(car for car in CARS if car["id"] == car_id)

    info_text = (
        f"üìã –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {car['brand']} {car['model']}\n\n"
        f"üöó –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {car['year']}\n"
        f"üí∞ –¶–µ–Ω–∞: {car['price']:,} ‚ÇΩ\n"
        f"üõ£ –ü—Ä–æ–±–µ–≥: {car['mileage']:,} –∫–º\n"
        f"‚öôÔ∏è –î–≤–∏–≥–∞—Ç–µ–ª—å: {car['engine']}\n"
        f"üí™ –ú–æ—â–Ω–æ—Å—Ç—å: {car['power']} –ª.—Å.\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{car['description']}"
    )

    await callback_query.answer()
    await callback_query.message.reply(info_text)

@dp.callback_query(lambda c: c.data.startswith('contact_'))
async def process_contact(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
    await callback_query.answer()
    await callback_query.message.reply(
        "üìû –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:\n"
        "- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
        "- Telegram: @manager_username\n\n"
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–ù-–í–° —Å 9:00 –¥–æ 21:00"
    )

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())