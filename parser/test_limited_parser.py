#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –Ω–∞ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from avito_parser import AvitoParser

def test_limited():
    """–¢–µ—Å—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –≤ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    print("üß™ –¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ (–ø–µ—Ä–≤—ã–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è)")
    print("=" * 50)
    
    parser = AvitoParser(headless=False)
    
    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    url = "https://www.avito.ru/brands/be5f12b20964ea30a159d92acf5074cb?gdlkerfdnwq=101&page_from=from_item_header&iid=7526372017&page_from=from_item_card&iid=7526372017"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    original_parse = parser.parse_avito_page
    
    def limited_parse(url):
        """–ü–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        print(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        
        if not parser.driver:
            parser.setup_driver()
        
        try:
            parser.driver.get(url)
            time.sleep(5)
            parser.scroll_to_load_all()
            
            car_elements = parser.driver.find_elements(By.CSS_SELECTOR, '[itemtype="http://schema.org/Product"]')
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(car_elements)} (–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3)")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3
            car_elements = car_elements[:3]
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
            car_links = []
            car_titles = []
            car_prices = []
            
            for i, element in enumerate(car_elements, 1):
                try:
                    title_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="name"]')
                    title = title_elem.text.strip()
                    car_titles.append(title)
                    
                    try:
                        price_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="price"]')
                        price_text = price_elem.get_attribute('content')
                        if not price_text:
                            price_elem = element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                            price_text = price_elem.text
                        price = parser.parse_price(price_text)
                    except:
                        price = 0
                    car_prices.append(price)
                    
                    link_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="url"]')
                    car_url = urljoin(url, link_elem.get_attribute('href'))
                    car_links.append(car_url)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    continue
            
            # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for i, (car_url, title, price) in enumerate(zip(car_links, car_titles, car_prices), 1):
                try:
                    print(f"\nüöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/3: {title}")
                    
                    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    full_title, brand, model, year = parser.parse_car_title(title)
                    print(f"  üìù –†–∞–∑–æ–±—Ä–∞–Ω–æ: {brand} | {model} | {year}")
                    
                    # –ë–∞–∑–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    basic_details = parser.parse_car_details(title)
                    print(f"  üîß –î–µ—Ç–∞–ª–∏: {basic_details}")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Å—Ç–∞
                    print(f"  üí∞ –¶–µ–Ω–∞: {price:,} ‚ÇΩ")
                    print(f"  üîó URL: {car_url[:50]}...")
                    
                    # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                    from avito_parser import CarData
                    car = CarData(
                        title=full_title,
                        brand=brand,
                        model=model,
                        year=year,
                        price=price,
                        url=car_url,
                        description=f"{brand} {model} {year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
                    )
                    
                    parser.cars_data.append(car)
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    
                except Exception as e:
                    import traceback
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
                    continue
            
            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        
        finally:
            if parser.driver:
                parser.driver.quit()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
    import time
    from selenium.webdriver.common.by import By
    from urllib.parse import urljoin
    
    try:
        limited_parse(url)
        
        if parser.cars_data:
            save = input(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π? (y/n): ").lower()
            if save in ['y', 'yes', '–¥–∞', '–¥']:
                parser.save_to_hugo("../hugo-site/content/cars")
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_limited()
