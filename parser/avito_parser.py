#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ê–≤–∏—Ç–æ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–ª—è Hugo –∫–∞—Ç–∞–ª–æ–≥–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Selenium –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–Ω—Ç–∏—Ä–æ–±–æ—Ç–∞.
"""

import os
import re
import time
import json
import datetime
import requests
from pathlib import Path
from urllib.parse import urljoin, urlparse
from dataclasses import dataclass
from typing import List, Optional

try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
    from webdriver_manager.chrome import ChromeDriverManager
except ImportError:
    print("‚ùå Selenium –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install selenium webdriver-manager")
    print("üåê –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ChromeDriver: brew install chromedriver")
    exit(1)

@dataclass
class CarData:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    title: str
    brand: str
    model: str
    year: int
    price: int
    mileage: Optional[int] = None
    engine_volume: Optional[str] = None
    fuel_type: Optional[str] = None
    transmission: Optional[str] = None
    drive_type: Optional[str] = None
    body_type: Optional[str] = None
    color: Optional[str] = None
    condition: str = "–•–æ—Ä–æ—à–µ–µ"
    description: Optional[str] = None
    vin: Optional[str] = None
    url: Optional[str] = None
    image_url: Optional[str] = None
    image_filename: Optional[str] = None
    images: Optional[List[str]] = None

class AvitoParser:
    def __init__(self, headless: bool = False, max_images: int = 10):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        self.driver = None
        self.headless = headless
        self.max_images = max_images
        self.cars_data: List[CarData] = []

        # –ö–∞—Ä—Ç–∞ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–π
        self.transmission_map = {
            'MT': 'MT', '–ú–¢': 'MT', '–º–µ—Ö–∞–Ω–∏–∫–∞': 'MT', '—Ä—É—á–Ω–∞—è': 'MT',
            'AT': 'AT', '–ê–¢': 'AT', '–∞–≤—Ç–æ–º–∞—Ç': 'AT', '–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è': 'AT',
            'CVT': 'AT', '—Ä–æ–±–æ—Ç': 'AT', '–≤–∞—Ä–∏–∞—Ç–æ—Ä': 'AT'
        }

        # –ö–∞—Ä—Ç–∞ —Ç–∏–ø–æ–≤ —Ç–æ–ø–ª–∏–≤–∞
        self.fuel_map = {
            '–±–µ–Ω–∑–∏–Ω': '–ë–µ–Ω–∑–∏–Ω', '–¥–∏–∑–µ–ª—å': '–î–∏–∑–µ–ª—å', '–≥–∏–±—Ä–∏–¥': '–ì–∏–±—Ä–∏–¥',
            '—ç–ª–µ–∫—Ç—Ä–æ': '–≠–ª–µ–∫—Ç—Ä–æ', '–≥–∞–∑': '–ì–∞–∑'
        }

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞"""
        chrome_options = Options()

        if self.headless:
            chrome_options.add_argument("--headless")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
            service = Service(ChromeDriverManager().install())
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            print("‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            print("üîß –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: brew install chromedriver")
            raise

    def parse_car_title(self, title: str) -> tuple:
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –ü—Ä–∏–º–µ—Ä—ã: "BMW 5 —Å–µ—Ä–∏—è 2.0 AT, 2017", "Infiniti QX80 5.6 AT, 2015"

        # –£–±–∏—Ä–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        title_clean = re.sub(r',.*$', '', title)
        title_clean = re.sub(r'\d+\.\d+\s+(AT|MT)', '', title_clean).strip()

        # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        parts = title_clean.split()
        if len(parts) < 2:
            return title, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω", title, 2020

        brand = parts[0]

        # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤
        if brand.upper() in ['–í–ê–ó', 'VAZ']:
            brand = "–í–ê–ó (LADA)"
        elif brand.upper() == 'LAND' and len(parts) > 1 and parts[1].upper() == 'ROVER':
            brand = "Land Rover"
            parts = parts[1:]  # —É–±–∏—Ä–∞–µ–º "LAND" –∏–∑ —á–∞—Å—Ç–µ–π

        # –ò—â–µ–º –≥–æ–¥ –≤ –∫–æ–Ω—Ü–µ
        year = 2020
        year_match = re.search(r'\b(19|20)\d{2}\b', title)
        if year_match:
            year = int(year_match.group())

        # –ú–æ–¥–µ–ª—å - –≤—Å–µ —á—Ç–æ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–æ–º –∏ –≥–æ–¥–æ–º
        model_parts = []
        for part in parts[1:]:
            if re.match(r'\b(19|20)\d{2}\b', part):
                break
            if not re.match(r'\d+\.\d+', part):  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
                model_parts.append(part)

        model = ' '.join(model_parts) if model_parts else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"

        return title, brand, model, year

    def parse_price(self, price_text: str) -> int:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã"""
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
        price_clean = re.sub(r'[^\d]', '', price_text)
        try:
            return int(price_clean)
        except ValueError:
            return 0

    def parse_mileage(self, text: str) -> Optional[int]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–±–µ–≥–∞"""
        mileage_match = re.search(r'(\d+(?:\s*\d+)*)\s*(?:–∫–º|—Ç—ã—Å)', text.lower())
        if mileage_match:
            mileage_str = re.sub(r'\s+', '', mileage_match.group(1))
            try:
                mileage = int(mileage_str)
                # –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 1000, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Ç—ã—Å—è—á–∏ –∫–º
                if mileage < 1000:
                    mileage *= 1000
                return mileage
            except ValueError:
                pass
        return None

    def parse_car_details(self, title: str, description: str = "") -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        text = f"{title} {description}".lower()

        details = {}

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏
        for key, value in self.transmission_map.items():
            if key.lower() in text:
                details['transmission'] = value
                break

        # –ü–∞—Ä—Å–∏–Ω–≥ —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
        for key, value in self.fuel_map.items():
            if key in text:
                details['fuel_type'] = value
                break

        # –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä–µ–º–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
        engine_match = re.search(r'(\d+\.\d+)', title)
        if engine_match:
            details['engine_volume'] = engine_match.group(1)

        # –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–±–µ–≥–∞
        mileage = self.parse_mileage(text)
        if mileage:
            details['mileage'] = mileage

        return details

    def download_image(self, image_url: str, filename: str, images_dir: str = "../hugo-site/static/images/cars") -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ê–≤–∏—Ç–æ"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            images_path = Path(images_dir)
            images_path.mkdir(parents=True, exist_ok=True)

            # –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            filepath = images_path / filename

            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if filepath.exists():
                print(f"üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {filename}")
                return True

            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            headers = {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
            }

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = requests.get(image_url, headers=headers, timeout=10)
            response.raise_for_status()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'wb') as f:
                f.write(response.content)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filename}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")
            return False

    def generate_image_filename(self, brand: str, model: str, year: int, index: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        clean_brand = re.sub(r'[^\w\-]', '', brand.lower().replace(' ', '-'))
        clean_model = re.sub(r'[^\w\-]', '', model.lower().replace(' ', '-'))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        if index > 0:
            return f"{clean_brand}-{clean_model}-{year}-{index}.jpg"
        else:
            return f"{clean_brand}-{clean_model}-{year}.jpg"

    def wait_and_click(self, element, timeout=10):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∏ –∫–ª–∏–∫"""
        try:
            WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable(element))
            self.driver.execute_script("arguments[0].click();", element)
            return True
        except TimeoutException:
            return False

    def scroll_to_load_all(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π"""
        print("üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")

        last_height = self.driver.execute_script("return document.body.scrollHeight")

        while True:
            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break
            last_height = new_height

        print("‚úÖ –í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    def parse_car_details_from_page(self, car_url: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        try:
            print(f"  üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–∞—Ä—Ç–æ—á–∫—É: {car_url}")

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
            self.driver.execute_script(f"window.open('{car_url}', '_blank');")
            self.driver.switch_to.window(self.driver.window_handles[-1])

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(3)

            details = {}

                        # –ò—â–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            images = []
            try:
                # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥–∞–ª–µ—Ä–µ–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                gallery_items = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="image-preview/item"] img')
                for img in gallery_items:
                    src = img.get_attribute('src')
                    if src and not any(x in src.lower() for x in ['placeholder', 'no-photo']):
                        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ
                        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                        if '?cqp=' in src:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
                            base_url = src.split('?cqp=')[0]
                            high_quality_src = f"{base_url}?size=1200x900"
                        else:
                            high_quality_src = src
                        
                        if high_quality_src not in images:
                            images.append(high_quality_src)

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –≥–∞–ª–µ—Ä–µ–µ, –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if not images:
                    main_imgs = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="image-frame/image"], .desktop-1i6k59z, img[alt*="—Ü–µ–Ω–∞"]')
                    for img in main_imgs:
                        src = img.get_attribute('src')
                        if src and not any(x in src.lower() for x in ['placeholder', 'no-photo']):
                            if '?cqp=' in src:
                                base_url = src.split('?cqp=')[0]
                                high_quality_src = f"{base_url}?size=1200x900"
                            else:
                                high_quality_src = src
                            
                            if high_quality_src not in images:
                                images.append(high_quality_src)

            except NoSuchElementException:
                pass

            details['images'] = images[:self.max_images]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            # –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            try:
                desc_elem = self.driver.find_element(By.CSS_SELECTOR, '[data-marker="item-view/item-description"], .item-description-text, [itemprop="description"]')
                details['full_description'] = desc_elem.text.strip()
            except NoSuchElementException:
                details['full_description'] = None

            # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
            try:
                params = self.driver.find_elements(By.CSS_SELECTOR, '[data-marker="item-view/item-params"], .item-params .item-params-list li')
                for param in params:
                    param_text = param.text.strip()
                    if '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞' in param_text:
                        details['year_from_page'] = param_text.split(':')[-1].strip()
                    elif '–ü—Ä–æ–±–µ–≥' in param_text:
                        details['mileage_from_page'] = param_text.split(':')[-1].strip()
                    elif '–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á' in param_text:
                        details['transmission_from_page'] = param_text.split(':')[-1].strip()
                    elif '–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞' in param_text:
                        details['fuel_type_from_page'] = param_text.split(':')[-1].strip()
                    elif '–ü—Ä–∏–≤–æ–¥' in param_text:
                        details['drive_type_from_page'] = param_text.split(':')[-1].strip()
                    elif '–¢–∏–ø –∫—É–∑–æ–≤–∞' in param_text:
                        details['body_type_from_page'] = param_text.split(':')[-1].strip()
                    elif '–¶–≤–µ—Ç' in param_text:
                        details['color_from_page'] = param_text.split(':')[-1].strip()
                    elif 'VIN' in param_text:
                        details['vin_from_page'] = param_text.split(':')[-1].strip()
            except NoSuchElementException:
                pass

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
            self.driver.close()
            self.driver.switch_to.window(self.driver.window_handles[0])

            return details

        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                if len(self.driver.window_handles) > 1:
                    self.driver.close()
                    self.driver.switch_to.window(self.driver.window_handles[0])
            except:
                pass
            return {}

    def download_multiple_images(self, images: list, brand: str, model: str, year: int) -> list:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        downloaded_files = []

        for i, image_url in enumerate(images):
            try:
                filename = self.generate_image_filename(brand, model, year, i)
                if self.download_image(image_url, filename):
                    downloaded_files.append(filename)
                    print(f"  üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{len(images)}: {filename}")
                else:
                    print(f"  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {i+1}: {e}")
                continue

        return downloaded_files

    def parse_avito_page(self, url: str):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ê–≤–∏—Ç–æ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É"""
        print(f"üîç –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")

        if not self.driver:
            self.setup_driver()

        try:
            self.driver.get(url)

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            time.sleep(5)

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            self.scroll_to_load_all()

            # –ò—â–µ–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            car_elements = self.driver.find_elements(By.CSS_SELECTOR, '[itemtype="http://schema.org/Product"]')

            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(car_elements)}")
            print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(car_elements) * 5} —Å–µ–∫—É–Ω–¥")

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            car_links = []
            car_titles = []
            car_prices = []

            for i, element in enumerate(car_elements, 1):
                try:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    title_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="name"]')
                    title = title_elem.text.strip()
                    car_titles.append(title)

                    # –¶–µ–Ω–∞
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ content –∞—Ç—Ä–∏–±—É—Ç–∞
                        price_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="price"]')
                        price_text = price_elem.get_attribute('content')
                        if not price_text:
                            # –ï—Å–ª–∏ content –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º text –∏–∑ data-marker
                            price_elem = element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                            price_text = price_elem.text
                        price = self.parse_price(price_text)
                    except:
                        price = 0
                    car_prices.append(price)

                    # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
                    link_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="url"]')
                    car_url = urljoin(url, link_elem.get_attribute('href'))
                    car_links.append(car_url)

                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    continue

            # –¢–µ–ø–µ—Ä—å –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ
            for i, (car_url, title, price) in enumerate(zip(car_links, car_titles, car_prices), 1):
                try:
                    print(f"\nüöó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(car_links)}: {title}")

                    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                    full_title, brand, model, year = self.parse_car_title(title)

                    # –ë–∞–∑–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    basic_details = self.parse_car_details(title)

                    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
                    detailed_info = self.parse_car_details_from_page(car_url)

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_files = []
                    if detailed_info.get('images'):
                        image_files = self.download_multiple_images(
                            detailed_info['images'], brand, model, year
                        )

                                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    mileage = basic_details.get('mileage', 0)
                    if detailed_info.get('mileage_from_page'):
                        try:
                            mileage_text = detailed_info['mileage_from_page']
                            mileage = self.parse_mileage(mileage_text)
                        except:
                            pass

                    transmission = basic_details.get('transmission', 'AT')
                    if detailed_info.get('transmission_from_page'):
                        trans_text = detailed_info['transmission_from_page'].lower()
                        for key, value in self.transmission_map.items():
                            if key.lower() in trans_text:
                                transmission = value
                                break

                    fuel_type = basic_details.get('fuel_type', '–ë–µ–Ω–∑–∏–Ω')
                    if detailed_info.get('fuel_type_from_page'):
                        fuel_text = detailed_info['fuel_type_from_page'].lower()
                        for key, value in self.fuel_map.items():
                            if key in fuel_text:
                                fuel_type = value
                                break

                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    car = CarData(
                        title=full_title,
                        brand=brand,
                        model=model,
                        year=year,
                        price=price,
                        mileage=mileage,
                        engine_volume=basic_details.get('engine_volume'),
                        fuel_type=fuel_type,
                        transmission=transmission,
                        drive_type=detailed_info.get('drive_type_from_page', '–ü–µ—Ä–µ–¥–Ω–∏–π'),
                        body_type=detailed_info.get('body_type_from_page', '–°–µ–¥–∞–Ω'),
                        color=detailed_info.get('color_from_page', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        url=car_url,
                        image_url=detailed_info.get('images', [None])[0] if detailed_info.get('images') else None,
                        image_filename=image_files[0] if image_files else None,
                        images=image_files,
                        vin=detailed_info.get('vin_from_page'),
                        description=detailed_info.get('full_description') or f"{brand} {model} {year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
                    )

                    # –£–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ–ø–∏—Å–∞–Ω–∏–µ

                    self.cars_data.append(car)
                    print(f"‚úÖ {brand} {model} {year} - {price:,} ‚ÇΩ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)})")

                except Exception as e:
                    import traceback
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                    print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
                    continue

            print(f"\nüéâ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")

        finally:
            if self.driver:
                self.driver.quit()

    def save_to_hugo(self, output_dir: str = "../hugo-site/content/cars"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Hugo"""
        output_path = Path(output_dir)
        output_path.mkdir(parents=True, exist_ok=True)

        print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(self.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ Hugo...")

        for car in self.cars_data:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = f"{car.brand.lower().replace(' ', '-').replace('(', '').replace(')', '')}-{car.model.lower().replace(' ', '-').replace('/', '-')}-{car.year}.md"
            filename = re.sub(r'[^\w\-.]', '', filename)

            filepath = output_path / filename

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if car.images and len(car.images) > 0:
                images_list = [f"images/cars/{img}" for img in car.images]
                images_yaml = '[' + ', '.join([f'"{img}"' for img in images_list]) + ']'
                main_image = images_list[0]
            else:
                images_yaml = '["images/cars/placeholder.svg"]'
                main_image = "images/cars/placeholder.svg"

            # –®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–∞
            content = f"""---
title: "{car.title}"
date: {datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%S+03:00')}
draft: false
image: "{main_image}"
images: {images_yaml}

# –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
brand: "{car.brand}"
model: "{car.model}"

year: {car.year}
price: {car.price}
mileage: {car.mileage or 50000}
engine_volume: {car.engine_volume or '2.0'}
fuel_type: "{car.fuel_type}"
transmission: "{car.transmission}"
drive_type: "{car.drive_type or '–ü–µ—Ä–µ–¥–Ω–∏–π'}"
body_type: "{car.body_type or '–°–µ–¥–∞–Ω'}"
color: "{car.color or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
condition: "{car.condition}"
vin: "{car.vin or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
owners_count: 1
pts_original: true
customs_cleared: true
exchange_possible: true
credit_available: true
description: "{car.description}"
source_url: "{car.url}"
tags: ["–∞–≤–∏—Ç–æ", "–∞–≤—Ç–æ–º–æ–±–∏–ª—å"]
weight: 1
---

## –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {car.brand} {car.model} {car.year}

| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |
|----------|----------|
| **–ú–∞—Ä–∫–∞** | {car.brand} |
| **–ú–æ–¥–µ–ª—å** | {car.model} |
| **–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞** | {car.year} |
| **–¶–µ–Ω–∞** | {car.price:,} ‚ÇΩ |
| **–ü—Ä–æ–±–µ–≥** | {car.mileage or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–º |
| **–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è** | {car.engine_volume or '–ù–µ —É–∫–∞–∑–∞–Ω'} –ª |
| **–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞** | {car.fuel_type} |
| **–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á** | {car.transmission} |
| **–°–æ—Å—Ç–æ—è–Ω–∏–µ** | {car.condition} |

## –û–ø–∏—Å–∞–Ω–∏–µ

{car.description}

### –ö–æ–Ω—Ç–∞–∫—Ç—ã
- –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67
- Email: info@auto-lombard.ru

**–í–æ–∑–º–æ–∂–µ–Ω –æ–±–º–µ–Ω, –∫—Ä–µ–¥–∏—Ç, –ª–∏–∑–∏–Ω–≥.**
"""

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)

            print(f"‚úÖ –°–æ–∑–¥–∞–Ω: {filepath}")

    def save_to_json(self, filename: str = "avito_cars.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        data = []
        for car in self.cars_data:
            data.append({
                'title': car.title,
                'brand': car.brand,
                'model': car.model,
                'year': car.year,
                'price': car.price,
                'mileage': car.mileage,
                'fuel_type': car.fuel_type,
                'transmission': car.transmission,
                'url': car.url,
                'image_url': car.image_url,
                'image_filename': car.image_filename,
                'images': car.images
            })

        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)

        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöó –ê–≤–∏—Ç–æ –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∞–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥–∞")
    print("=" * 50)

    # URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    avito_url = "https://www.avito.ru/brands/be5f12b20964ea30a159d92acf5074cb?gdlkerfdnwq=101&page_from=from_item_header&iid=7526372017&page_from=from_item_card&iid=7526372017"

    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = AvitoParser(headless=False)  # False = –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä

    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        parser.parse_avito_page(avito_url)

        if parser.cars_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Hugo
            parser.save_to_hugo()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            parser.save_to_json()

            print("\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(parser.cars_data)}")
            print(f"üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –≤: hugo-site/content/cars/")
            print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
            print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: hugo --source hugo-site")
            print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ models-data.json")
            print("4. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ: git add . && git commit -m 'Add cars from Avito' && git push")

        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏")

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
