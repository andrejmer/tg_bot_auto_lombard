#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from avito_parser import AvitoParser, CarData
import time
from selenium.webdriver.common.by import By
from urllib.parse import urljoin

def test_images():
    """–¢–µ—Å—Ç —Å 2 –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("üì∏ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏")
    print("üî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º 2 –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    print("=" * 50)

    parser = AvitoParser(headless=False)
    url = "https://www.avito.ru/brands/be5f12b20964ea30a159d92acf5074cb?gdlkerfdnwq=101&page_from=from_item_header&iid=7526372017&page_from=from_item_card&iid=7526372017"

    try:
        if not parser.driver:
            parser.setup_driver()

        parser.driver.get(url)
        time.sleep(5)
        parser.scroll_to_load_all()

        car_elements = parser.driver.find_elements(By.CSS_SELECTOR, '[itemtype="http://schema.org/Product"]')
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(car_elements)} (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2)")

        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
        car_elements = car_elements[:2]

        # –°–æ–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        car_data = []
        for i, element in enumerate(car_elements, 1):
            try:
                title_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="name"]')
                title = title_elem.text.strip()

                try:
                    price_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="price"]')
                    price_text = price_elem.get_attribute('content')
                    if not price_text:
                        price_elem = element.find_element(By.CSS_SELECTOR, '[data-marker="item-price"]')
                        price_text = price_elem.text
                    price = parser.parse_price(price_text)
                except:
                    price = 0

                link_elem = element.find_element(By.CSS_SELECTOR, '[itemprop="url"]')
                car_url = urljoin(url, link_elem.get_attribute('href'))

                car_data.append((title, price, car_url))

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                continue

        # –¢–µ–ø–µ—Ä—å –¥–µ—Ç–∞–ª—å–Ω–æ –ø–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        for i, (title, price, car_url) in enumerate(car_data, 1):
            try:
                print(f"\nüöó –¢–µ—Å—Ç–∏—Ä—É–µ–º {i}/2: {title}")

                # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
                full_title, brand, model, year = parser.parse_car_title(title)
                basic_details = parser.parse_car_details(title)

                print(f"  üìù {brand} {model} {year}")
                print(f"  üí∞ {price:,} ‚ÇΩ")

                # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
                detailed_info = parser.parse_car_details_from_page(car_url)

                if detailed_info.get('images'):
                    print(f"  üéØ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(detailed_info['images'])}")
                    for j, img_url in enumerate(detailed_info['images'][:3], 1):
                        print(f"    {j}. {img_url[:60]}...")

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_files = parser.download_multiple_images(
                        detailed_info['images'], brand, model, year
                    )

                    print(f"  ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
                    for img_file in image_files:
                        print(f"    üìÅ {img_file}")

                    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    car = CarData(
                        title=full_title,
                        brand=brand,
                        model=model,
                        year=year,
                        price=price,
                        mileage=basic_details.get('mileage', 0),
                        engine_volume=basic_details.get('engine_volume', '2.0'),
                        fuel_type=basic_details.get('fuel_type', '–ë–µ–Ω–∑–∏–Ω'),
                        transmission=basic_details.get('transmission', 'AT'),
                        url=car_url,
                        images=image_files,
                        image_filename=image_files[0] if image_files else None,
                        description=detailed_info.get('full_description') or f"{brand} {model} {year} –≥–æ–¥–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏."
                    )

                    parser.cars_data.append(car)

                else:
                    print(f"  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            except Exception as e:
                import traceback
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {i}: {e}")
                print(f"  –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
                continue

        print(f"\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∞:")
        for car in parser.cars_data:
            images_count = len(car.images) if car.images else 0
            print(f"‚Ä¢ {car.brand} {car.model} {car.year}")
            print(f"  üì∑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}")
            if car.images:
                print(f"  üìÅ –§–∞–π–ª—ã: {', '.join(car.images)}")

        if parser.cars_data:
            save = input(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å {len(parser.cars_data)} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏? (y/n): ").lower()
            if save in ['y', 'yes', '–¥–∞', '–¥']:
                parser.save_to_hugo("../hugo-site/content/cars")
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                import subprocess
                result = subprocess.run("ls -la ../hugo-site/static/images/cars/", shell=True, capture_output=True, text=True)
                print(f"\nüìÇ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
                print(result.stdout)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if parser.driver:
            parser.driver.quit()

if __name__ == "__main__":
    test_images()
