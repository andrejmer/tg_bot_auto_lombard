#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ê–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥–∞
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Hugo –∫–∞—Ç–∞–ª–æ–≥–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""

import asyncio
import logging
import os
from typing import Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    WebAppInfo,
    MenuButtonWebApp
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
from bot_functions import (
    get_start_message, get_catalog_message, get_search_message,
    get_callback_response, search_by_text, get_menu_button_config
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
WEBAPP_URL = os.getenv("WEBAPP_URL", "http://localhost:1313")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π)
if BOT_TOKEN and BOT_TOKEN != "YOUR_BOT_TOKEN_HERE" and not BOT_TOKEN.startswith("TEST_"):
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()
else:
    bot = None
    dp = None


def create_keyboard_from_buttons(buttons_data):
    """–°–æ–∑–¥–∞–µ—Ç Telegram –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    keyboard = []

    for button in buttons_data:
        button_row = []

        if "web_app_url" in button:
            telegram_button = InlineKeyboardButton(
                text=button["text"],
                web_app=WebAppInfo(url=button["web_app_url"])
            )
        elif "callback_data" in button:
            telegram_button = InlineKeyboardButton(
                text=button["text"],
                callback_data=button["callback_data"]
            )
        elif "url" in button:
            telegram_button = InlineKeyboardButton(
                text=button["text"],
                url=button["url"]
            )
        else:
            continue

        button_row.append(telegram_button)
        keyboard.append(button_row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


if dp:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ dispatcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    @dp.message(Command("start"))
    async def cmd_start(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Web App –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
        menu_config = get_menu_button_config()
        webapp_button = MenuButtonWebApp(
            text=menu_config["text"],
            web_app=WebAppInfo(url=menu_config["web_app_url"])
        )

        await bot.set_chat_menu_button(
            chat_id=message.chat.id,
            menu_button=webapp_button
        )

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_data = get_start_message()
        keyboard = create_keyboard_from_buttons(message_data["buttons"])

        await message.answer(
            message_data["text"],
            reply_markup=keyboard,
            parse_mode=message_data["parse_mode"]
        )


    @dp.message(Command("catalog"))
    async def cmd_catalog(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /catalog - –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞"""

        message_data = get_catalog_message()
        keyboard = create_keyboard_from_buttons(message_data["buttons"])

        await message.answer(
            message_data["text"],
            reply_markup=keyboard,
            parse_mode=message_data["parse_mode"]
        )


    @dp.message(Command("search"))
    async def cmd_search(message: types.Message):
        """–ö–æ–º–∞–Ω–¥–∞ /search - –±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫"""

        message_data = get_search_message()
        keyboard = create_keyboard_from_buttons(message_data["buttons"])

        await message.answer(
            message_data["text"],
            reply_markup=keyboard,
            parse_mode=message_data["parse_mode"]
        )


    @dp.callback_query()
    async def handle_callbacks(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""

        if callback.data == "back_to_start":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            message_data = get_start_message()
            keyboard = create_keyboard_from_buttons(message_data["buttons"])

            await callback.message.edit_text(
                message_data["text"],
                reply_markup=keyboard,
                parse_mode=message_data["parse_mode"]
            )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback'—ã
            response_data = get_callback_response(callback.data)

            if response_data:
                keyboard = create_keyboard_from_buttons(response_data["buttons"])

                await callback.message.edit_text(
                    response_data["text"],
                    reply_markup=keyboard,
                    parse_mode=response_data["parse_mode"]
                )

        await callback.answer()


    @dp.message()
    async def handle_text_messages(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫)"""

        search_data = search_by_text(message.text)
        keyboard = create_keyboard_from_buttons(search_data["buttons"])

        await message.answer(
            search_data["text"],
            reply_markup=keyboard,
            parse_mode=search_data["parse_mode"]
        )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    if not bot or not dp:
        logger.error("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
        return

    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"Web App URL: {WEBAPP_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
üìû **–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã**

**–¢–µ–ª–µ—Ñ–æ–Ω:** +7 (999) 123-45-67
**Email:** info@autolombard.ru
**–ê–¥—Ä–µ—Å:** –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123

**–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:**
–ü–Ω-–ü—Ç: 9:00 - 20:00
–°–±-–í—Å: 10:00 - 18:00

**–ú–µ–Ω–µ–¥–∂–µ—Ä—ã:**
üë®‚Äçüíº –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ - @manager_ivan
üë®‚Äçüíº –°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤ - @manager_sergey
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üì± –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                    url="https://t.me/manager_ivan"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üöó –ö –∫–∞—Ç–∞–ª–æ–≥—É",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/cars/")
                )
            ]
        ])

        await callback.message.edit_text(
            contacts_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    elif callback.data == "about":
        about_text = """
‚ÑπÔ∏è **–û –Ω–∞—à–µ–º –∞–≤—Ç–æ–ª–æ–º–±–∞—Ä–¥–µ**

**–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:**
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –ø—Ä–æ–±–µ–≥–æ–º
‚Ä¢ –ß–µ—Å—Ç–Ω—ã–µ —Ü–µ–Ω—ã –±–µ–∑ –ø–µ—Ä–µ–ø–ª–∞—Ç
‚Ä¢ –ü–æ–ª–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—Ä–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —á–∏—Å—Ç–æ—Ç—ã
‚Ä¢ –ü–æ–º–æ—â—å –≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

**–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –±–æ–ª–µ–µ 10 –ª–µ—Ç
‚úÖ –ë–æ–ª–µ–µ 500 –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
‚úÖ –í—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
‚úÖ Flexible payment options
‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöó –°–º–æ—Ç—Ä–µ—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/cars/")
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏",
                    callback_data="contacts"
                )
            ]
        ])

        await callback.message.edit_text(
            about_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    elif callback.data == "help":
        help_text = """
üîç **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
/search - –ü–æ–∏—Å–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏—Å–∫–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:**
1. –ù–∞–∂–º–∏—Ç–µ "üöó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –º–∞—Ä–∫–µ, —Ü–µ–Ω–µ, –≥–æ–¥—É
3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
4. –°–≤—è–∑—ã–≤–∞–π—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏

**–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–ù–∞–ø–∏—à–∏—Ç–µ @manager_ivan - –ø–æ–º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å!
        """

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöó –ö –∫–∞—Ç–∞–ª–æ–≥—É",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/cars/")
                )
            ],
            [
                InlineKeyboardButton(
                    text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                    callback_data="back_to_start"
                )
            ]
        ])

        await callback.message.edit_text(
            help_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    elif callback.data == "back_to_start":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        await cmd_start(callback.message)

    await callback.answer()


@dp.message()
async def handle_text_messages(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫)"""

    text = message.text.lower()

    # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    search_results = []

    # –ü–æ–∏—Å–∫ –ø–æ –º–∞—Ä–∫–∞–º
    brands = {
        'bmw': 'BMW',
        'mercedes': 'Mercedes-Benz',
        '–º–µ—Ä—Å–µ–¥–µ—Å': 'Mercedes-Benz',
        'toyota': 'Toyota',
        '—Ç–æ–π–æ—Ç–∞': 'Toyota',
        'audi': 'Audi',
        '–∞—É–¥–∏': 'Audi',
        'volkswagen': 'Volkswagen',
        '—Ñ–æ–ª—å–∫—Å–≤–∞–≥–µ–Ω': 'Volkswagen',
        'hyundai': 'Hyundai',
        '—Ö–µ–Ω–¥–∞–π': 'Hyundai'
    }

    found_brand = None
    for keyword, brand in brands.items():
        if keyword in text:
            found_brand = brand
            break

    if found_brand:
        search_url = f"{WEBAPP_URL}/cars/?brand={found_brand}"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üöó –°–º–æ—Ç—Ä–µ—Ç—å {found_brand}",
                    web_app=WebAppInfo(url=search_url)
                )
            ],
            [
                InlineKeyboardButton(
                    text="üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/cars/")
                )
            ]
        ])

        await message.answer(
            f"üîç **–ü–æ–∏—Å–∫: {found_brand}**\n\n–ù–∞–π–¥–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –º–∞—Ä–∫–∏ {found_brand}.\n–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥",
                    web_app=WebAppInfo(url=f"{WEBAPP_URL}/cars/")
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                    callback_data="contacts"
                )
            ]
        ])

        await message.answer(
            "ü§î –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É!",
            reply_markup=keyboard
        )


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""

    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"Web App URL: {WEBAPP_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())